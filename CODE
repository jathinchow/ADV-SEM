import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Simulated Genomic, Proteomic, and Structural Data
np.random.seed(42)
genomic_data = pd.DataFrame({
    'Gene': [f'Gene{i}' for i in range(1, 21)],
    'Expression_Level': np.random.normal(10, 2, 20),
    'Mutation_Rate': np.random.normal(0.05, 0.01, 20)
})

proteomic_data = pd.DataFrame({
    'Protein': [f'Protein{i}' for i in range(1, 21)],
    'Concentration': np.random.normal(50, 10, 20),
    'Binding_Affinity': np.random.normal(0.8, 0.1, 20)
})

structural_data = pd.DataFrame({
    'Structure': [f'Structure{i}' for i in range(1, 21)],
    'Stability': np.random.normal(0.9, 0.05, 20),
    'Solubility': np.random.normal(0.85, 0.1, 20)
})

# Data Integration
integrated_data = pd.concat([genomic_data, proteomic_data.iloc[:, 1:], structural_data.iloc[:, 1:]], axis=1)

# Predicting Off-Target Effects
integrated_data['Off_Target_Score'] = (integrated_data['Mutation_Rate'] +
                                       (1 - integrated_data['Binding_Affinity']) +
                                       (1 - integrated_data['Stability'])) / 3

# Predicting Drug Resistance Mechanisms
integrated_data['Resistance_Score'] = integrated_data['Expression_Level'] * integrated_data['Mutation_Rate']

# Identifying Potential Biomarkers
threshold = 0.05
biomarkers = integrated_data[integrated_data['Mutation_Rate'] > threshold]

# Visualization

# 1. Genomic Expression Levels
plt.figure(figsize=(10, 6))
sns.barplot(x='Gene', y='Expression_Level', data=genomic_data, palette='viridis')
plt.title('Gene Expression Levels')
plt.xticks(rotation=45)
plt.xlabel('Gene')
plt.ylabel('Expression Level')
plt.tight_layout()
plt.show()


# 2. Binding Affinity and Stability
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Binding_Affinity', y='Stability', data=proteomic_data.merage(structural_data, left_index=True, right_index=True))
plt.title('Binding Affinity vs. Structural Stability')
plt.xlabel('Binding Affinity')
plt.ylabel('Stability')
plt.tight_layout()
plt.show()


# 3. Off-Target Scores
plt.figure(figsize=(10, 6))
sns.histplot(integrated_data['Off_Target_Score'], bins=10, kde=True, color='skyblue')
plt.title('Distribution of Off-Target Scores')
plt.xlabel('Off-Target Score')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# 4. Identifying Biomarkers
plt.figure(figsize=(10, 6))
sns.barplot(x='Gene', y='Mutation_Rate', data=biomarkers, palette='magma')
plt.title('Potential Biomarkers Based on Mutation Rate')
plt.xticks(rotation=45)
plt.xlabel('Gene')
plt.ylabel('Mutation Rate')
plt.tight_layout()
plt.show()


# Summary Report
print("=== Summary Report ===")
print("Top 5 Biomarkers Based on Mutation Rate:")
print(biomarkers[['Gene', 'Mutation_Rate']].sort_values(by='Mutation_Rate', ascending=False).head())
print("\nIntegrated Data Overview:")
print(integrated_data.describe())
